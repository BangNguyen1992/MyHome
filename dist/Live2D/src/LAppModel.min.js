"use strict";function LAppModel(){L2DBaseModel.prototype.constructor.call(this),this.modelHomeDir="",this.modelSetting=null,this.tmpMatrix=[]}LAppModel.prototype=new L2DBaseModel,LAppModel.prototype.load=function(e,t,i){this.setUpdating(!0),this.setInitialized(!1),this.modelHomeDir=t.substring(0,t.lastIndexOf("/")+1),this.modelSetting=new ModelSettingJson;var o=this;this.modelSetting.loadModelSetting(t,function(){var e=o.modelHomeDir+o.modelSetting.getModelFile();o.loadModelData(e,function(e){for(var t=0;t<o.modelSetting.getTextureNum();t++){var l=o.modelHomeDir+o.modelSetting.getTextureFile(t);o.loadTexture(t,l,function(){if(o.isTexLoaded){if(o.modelSetting.getExpressionNum()>0){o.expressions={};for(var e=0;e<o.modelSetting.getExpressionNum();e++){var t=o.modelSetting.getExpressionName(e),l=o.modelHomeDir+o.modelSetting.getExpressionFile(e);o.loadExpression(t,l)}}else o.expressionManager=null,o.expressions={};if(null==o.eyeBlink&&(o.eyeBlink=new L2DEyeBlink),null!=o.modelSetting.getPhysicsFile()?o.loadPhysics(o.modelHomeDir+o.modelSetting.getPhysicsFile()):o.physics=null,null!=o.modelSetting.getPoseFile()?o.loadPose(o.modelHomeDir+o.modelSetting.getPoseFile(),function(){o.pose.updateParam(o.live2DModel)}):o.pose=null,null!=o.modelSetting.getLayout()){var a=o.modelSetting.getLayout();null!=a.width&&o.modelMatrix.setWidth(a.width),null!=a.height&&o.modelMatrix.setHeight(a.height),null!=a.x&&o.modelMatrix.setX(a.x),null!=a.y&&o.modelMatrix.setY(a.y),null!=a.center_x&&o.modelMatrix.centerX(a.center_x),null!=a.center_y&&o.modelMatrix.centerY(a.center_y),null!=a.top&&o.modelMatrix.top(a.top),null!=a.bottom&&o.modelMatrix.bottom(a.bottom),null!=a.left&&o.modelMatrix.left(a.left),null!=a.right&&o.modelMatrix.right(a.right)}for(var e=0;e<o.modelSetting.getInitParamNum();e++)o.live2DModel.setParamFloat(o.modelSetting.getInitParamID(e),o.modelSetting.getInitParamValue(e));for(var e=0;e<o.modelSetting.getInitPartsVisibleNum();e++)o.live2DModel.setPartsOpacity(o.modelSetting.getInitPartsVisibleID(e),o.modelSetting.getInitPartsVisibleValue(e));o.live2DModel.saveParam(),o.preloadMotionGroup(LAppDefine.MOTION_GROUP_IDLE),o.mainMotionManager.stopAllMotions(),o.setUpdating(!1),o.setInitialized(!0),"function"==typeof i&&i()}})}})})},LAppModel.prototype.release=function(e){var t=Live2DFramework.getPlatformManager();e.deleteTexture(t.texture)},LAppModel.prototype.preloadMotionGroup=function(e){for(var t=this,i=0;i<this.modelSetting.getMotionNum(e);i++){var o=this.modelSetting.getMotionFile(e,i);this.loadMotion(o,this.modelHomeDir+o,function(o){o.setFadeIn(t.modelSetting.getMotionFadeIn(e,i)),o.setFadeOut(t.modelSetting.getMotionFadeOut(e,i))})}},LAppModel.prototype.update=function(){if(null==this.live2DModel)return void(LAppDefine.DEBUG_LOG&&console.error("Failed to update."));var e=UtSystem.getUserTimeMSec()-this.startTimeMSec,t=e/1e3,i=2*t*Math.PI;this.mainMotionManager.isFinished()&&this.startRandomMotion(LAppDefine.MOTION_GROUP_IDLE,LAppDefine.PRIORITY_IDLE),this.live2DModel.loadParam();var o=this.mainMotionManager.updateParam(this.live2DModel);o||null!=this.eyeBlink&&this.eyeBlink.updateParam(this.live2DModel),this.live2DModel.saveParam(),null==this.expressionManager||null==this.expressions||this.expressionManager.isFinished()||this.expressionManager.updateParam(this.live2DModel),this.live2DModel.addToParamFloat("PARAM_ANGLE_X",30*this.dragX,1),this.live2DModel.addToParamFloat("PARAM_ANGLE_Y",30*this.dragY,1),this.live2DModel.addToParamFloat("PARAM_ANGLE_Z",this.dragX*this.dragY*-30,1),this.live2DModel.addToParamFloat("PARAM_BODY_ANGLE_X",10*this.dragX,1),this.live2DModel.addToParamFloat("PARAM_EYE_BALL_X",this.dragX,1),this.live2DModel.addToParamFloat("PARAM_EYE_BALL_Y",this.dragY,1),this.live2DModel.addToParamFloat("PARAM_ANGLE_X",Number(15*Math.sin(i/6.5345)),.5),this.live2DModel.addToParamFloat("PARAM_ANGLE_Y",Number(8*Math.sin(i/3.5345)),.5),this.live2DModel.addToParamFloat("PARAM_ANGLE_Z",Number(10*Math.sin(i/5.5345)),.5),this.live2DModel.addToParamFloat("PARAM_BODY_ANGLE_X",Number(4*Math.sin(i/15.5345)),.5),this.live2DModel.setParamFloat("PARAM_BREATH",Number(.5+.5*Math.sin(i/3.2345)),1),null!=this.physics&&this.physics.updateParam(this.live2DModel),null==this.lipSync&&this.live2DModel.setParamFloat("PARAM_MOUTH_OPEN_Y",this.lipSyncValue),null!=this.pose&&this.pose.updateParam(this.live2DModel),this.live2DModel.update()},LAppModel.prototype.setRandomExpression=function(){var e=[];for(var t in this.expressions)e.push(t);var i=parseInt(Math.random()*e.length);this.setExpression(e[i])},LAppModel.prototype.startRandomMotion=function(e,t){var i=this.modelSetting.getMotionNum(e),o=parseInt(Math.random()*i);this.startMotion(e,o,t)},LAppModel.prototype.startMotion=function(e,t,i){var o=this.modelSetting.getMotionFile(e,t);if(null==o||""==o)return void(LAppDefine.DEBUG_LOG&&console.error("Failed to motion."));if(i==LAppDefine.PRIORITY_FORCE)this.mainMotionManager.setReservePriority(i);else if(!this.mainMotionManager.reserveMotion(i))return void(LAppDefine.DEBUG_LOG&&console.log("Motion is running."));var l,a=this;null==this.motions[e]?this.loadMotion(null,this.modelHomeDir+o,function(o){l=o,a.setFadeInFadeOut(e,t,i,l)}):(l=this.motions[e],a.setFadeInFadeOut(e,t,i,l))},LAppModel.prototype.setFadeInFadeOut=function(e,t,i,o){var l=this.modelSetting.getMotionFile(e,t);if(o.setFadeIn(this.modelSetting.getMotionFadeIn(e,t)),o.setFadeOut(this.modelSetting.getMotionFadeOut(e,t)),LAppDefine.DEBUG_LOG&&console.log("Start motion : "+l),null==this.modelSetting.getMotionSound(e,t))this.mainMotionManager.startMotionPrio(o,i);else{var a=this.modelSetting.getMotionSound(e,t),n=document.createElement("audio");n.src=this.modelHomeDir+a,LAppDefine.DEBUG_LOG&&console.log("Start sound : "+a),n.play(),this.mainMotionManager.startMotionPrio(o,i)}},LAppModel.prototype.setExpression=function(e){var t=this.expressions[e];LAppDefine.DEBUG_LOG&&console.log("Expression : "+e),this.expressionManager.startMotion(t,!1)},LAppModel.prototype.draw=function(e){MatrixStack.push(),MatrixStack.multMatrix(this.modelMatrix.getArray()),this.tmpMatrix=MatrixStack.getMatrix(),this.live2DModel.setMatrix(this.tmpMatrix),this.live2DModel.draw(),MatrixStack.pop()},LAppModel.prototype.hitTest=function(e,t,i){for(var o=this.modelSetting.getHitAreaNum(),l=0;l<o;l++)if(e==this.modelSetting.getHitAreaName(l)){var a=this.modelSetting.getHitAreaID(l);return this.hitTestSimple(a,t,i)}return!1};
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkxpdmUyRC9zcmMvTEFwcE1vZGVsLmpzIl0sIm5hbWVzIjpbIkxBcHBNb2RlbCIsIkwyREJhc2VNb2RlbCIsInByb3RvdHlwZSIsImNvbnN0cnVjdG9yIiwiY2FsbCIsInRoaXMiLCJtb2RlbEhvbWVEaXIiLCJtb2RlbFNldHRpbmciLCJ0bXBNYXRyaXgiLCJsb2FkIiwiZ2wiLCJtb2RlbFNldHRpbmdQYXRoIiwiY2FsbGJhY2siLCJzZXRVcGRhdGluZyIsInNldEluaXRpYWxpemVkIiwic3Vic3RyaW5nIiwibGFzdEluZGV4T2YiLCJNb2RlbFNldHRpbmdKc29uIiwidGhpc1JlZiIsImxvYWRNb2RlbFNldHRpbmciLCJwYXRoIiwiZ2V0TW9kZWxGaWxlIiwibG9hZE1vZGVsRGF0YSIsIm1vZGVsIiwiaSIsImdldFRleHR1cmVOdW0iLCJ0ZXhQYXRocyIsImdldFRleHR1cmVGaWxlIiwibG9hZFRleHR1cmUiLCJpc1RleExvYWRlZCIsImdldEV4cHJlc3Npb25OdW0iLCJleHByZXNzaW9ucyIsImoiLCJleHBOYW1lIiwiZ2V0RXhwcmVzc2lvbk5hbWUiLCJleHBGaWxlUGF0aCIsImdldEV4cHJlc3Npb25GaWxlIiwibG9hZEV4cHJlc3Npb24iLCJleHByZXNzaW9uTWFuYWdlciIsImV5ZUJsaW5rIiwiTDJERXllQmxpbmsiLCJnZXRQaHlzaWNzRmlsZSIsImxvYWRQaHlzaWNzIiwicGh5c2ljcyIsImdldFBvc2VGaWxlIiwibG9hZFBvc2UiLCJwb3NlIiwidXBkYXRlUGFyYW0iLCJsaXZlMkRNb2RlbCIsImdldExheW91dCIsImxheW91dCIsIm1vZGVsTWF0cml4Iiwic2V0V2lkdGgiLCJzZXRIZWlnaHQiLCJzZXRYIiwic2V0WSIsImNlbnRlclgiLCJjZW50ZXJZIiwidG9wIiwiYm90dG9tIiwibGVmdCIsInJpZ2h0IiwiZ2V0SW5pdFBhcmFtTnVtIiwic2V0UGFyYW1GbG9hdCIsImdldEluaXRQYXJhbUlEIiwiZ2V0SW5pdFBhcmFtVmFsdWUiLCJnZXRJbml0UGFydHNWaXNpYmxlTnVtIiwic2V0UGFydHNPcGFjaXR5IiwiZ2V0SW5pdFBhcnRzVmlzaWJsZUlEIiwiZ2V0SW5pdFBhcnRzVmlzaWJsZVZhbHVlIiwic2F2ZVBhcmFtIiwicHJlbG9hZE1vdGlvbkdyb3VwIiwiTEFwcERlZmluZSIsIk1PVElPTl9HUk9VUF9JRExFIiwibWFpbk1vdGlvbk1hbmFnZXIiLCJzdG9wQWxsTW90aW9ucyIsInJlbGVhc2UiLCJwbSIsIkxpdmUyREZyYW1ld29yayIsImdldFBsYXRmb3JtTWFuYWdlciIsImRlbGV0ZVRleHR1cmUiLCJ0ZXh0dXJlIiwibmFtZSIsImdldE1vdGlvbk51bSIsImZpbGUiLCJnZXRNb3Rpb25GaWxlIiwibG9hZE1vdGlvbiIsIm1vdGlvbiIsInNldEZhZGVJbiIsImdldE1vdGlvbkZhZGVJbiIsInNldEZhZGVPdXQiLCJnZXRNb3Rpb25GYWRlT3V0IiwidXBkYXRlIiwiREVCVUdfTE9HIiwiY29uc29sZSIsImVycm9yIiwidGltZU1TZWMiLCJVdFN5c3RlbSIsImdldFVzZXJUaW1lTVNlYyIsInN0YXJ0VGltZU1TZWMiLCJ0aW1lU2VjIiwidCIsIk1hdGgiLCJQSSIsImlzRmluaXNoZWQiLCJzdGFydFJhbmRvbU1vdGlvbiIsIlBSSU9SSVRZX0lETEUiLCJsb2FkUGFyYW0iLCJhZGRUb1BhcmFtRmxvYXQiLCJkcmFnWCIsImRyYWdZIiwiTnVtYmVyIiwic2luIiwibGlwU3luYyIsImxpcFN5bmNWYWx1ZSIsInNldFJhbmRvbUV4cHJlc3Npb24iLCJ0bXAiLCJwdXNoIiwibm8iLCJwYXJzZUludCIsInJhbmRvbSIsImxlbmd0aCIsInNldEV4cHJlc3Npb24iLCJwcmlvcml0eSIsIm1heCIsInN0YXJ0TW90aW9uIiwibW90aW9uTmFtZSIsIlBSSU9SSVRZX0ZPUkNFIiwic2V0UmVzZXJ2ZVByaW9yaXR5IiwicmVzZXJ2ZU1vdGlvbiIsImxvZyIsIm1vdGlvbnMiLCJtdG4iLCJzZXRGYWRlSW5GYWRlT3V0IiwiZ2V0TW90aW9uU291bmQiLCJzdGFydE1vdGlvblByaW8iLCJzb3VuZE5hbWUiLCJzbmQiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJzcmMiLCJwbGF5IiwiZHJhdyIsIk1hdHJpeFN0YWNrIiwibXVsdE1hdHJpeCIsImdldEFycmF5IiwiZ2V0TWF0cml4Iiwic2V0TWF0cml4IiwicG9wIiwiaGl0VGVzdCIsImlkIiwidGVzdFgiLCJ0ZXN0WSIsImxlbiIsImdldEhpdEFyZWFOdW0iLCJnZXRIaXRBcmVhTmFtZSIsImRyYXdJRCIsImdldEhpdEFyZWFJRCIsImhpdFRlc3RTaW1wbGUiXSwibWFwcGluZ3MiOiJBQUFBLFlBS0EsU0FBU0EsYUFHTEMsYUFBYUMsVUFBVUMsWUFBWUMsS0FBS0MsTUFFeENBLEtBQUtDLGFBQWUsR0FDcEJELEtBQUtFLGFBQWUsS0FDcEJGLEtBQUtHLGFBR1RSLFVBQVVFLFVBQVksR0FBSUQsY0FLMUJELFVBQVVFLFVBQVVPLEtBQU8sU0FBU0MsRUFBSUMsRUFBa0JDLEdBRXREUCxLQUFLUSxhQUFZLEdBQ2pCUixLQUFLUyxnQkFBZSxHQUVwQlQsS0FBS0MsYUFBZUssRUFBaUJJLFVBQVUsRUFBR0osRUFBaUJLLFlBQVksS0FBTyxHQUV0RlgsS0FBS0UsYUFBZSxHQUFJVSxpQkFFeEIsSUFBSUMsR0FBVWIsSUFFZEEsTUFBS0UsYUFBYVksaUJBQWlCUixFQUFrQixXQUVqRCxHQUFJUyxHQUFPRixFQUFRWixhQUFlWSxFQUFRWCxhQUFhYyxjQUN2REgsR0FBUUksY0FBY0YsRUFBTSxTQUFTRyxHQUVqQyxJQUFLLEdBQUlDLEdBQUksRUFBR0EsRUFBSU4sRUFBUVgsYUFBYWtCLGdCQUFpQkQsSUFDMUQsQ0FFSSxHQUFJRSxHQUFXUixFQUFRWixhQUNuQlksRUFBUVgsYUFBYW9CLGVBQWVILEVBRXhDTixHQUFRVSxZQUFZSixFQUFHRSxFQUFVLFdBRTdCLEdBQUlSLEVBQVFXLFlBQWMsQ0FFdEIsR0FBSVgsRUFBUVgsYUFBYXVCLG1CQUFxQixFQUM5QyxDQUVJWixFQUFRYSxjQUVSLEtBQUssR0FBSUMs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UW9DLElBQUksaUJBQW1CTSxHQUVuQ0MsRUFBSUksT0FDSnhJLEtBQUtxRSxrQkFBa0I2RCxnQkFBZ0JoRCxFQUFRb0MsS0FRdkQzSCxVQUFVRSxVQUFVd0gsY0FBZ0IsU0FBU3hDLEdBRXpDLEdBQUlLLEdBQVNsRixLQUFLMEIsWUFBWW1ELEVBRTFCVixZQUFXcUIsV0FDWEMsUUFBUW9DLElBQUksZ0JBQWtCaEQsR0FFbEM3RSxLQUFLaUMsa0JBQWtCdUYsWUFBWXRDLEdBQVEsSUFPL0N2RixVQUFVRSxVQUFVNEksS0FBTyxTQUFTcEksR0FPaENxSSxZQUFZMUIsT0FFWjBCLFlBQVlDLFdBQVczSSxLQUFLOEMsWUFBWThGLFlBRXhDNUksS0FBS0csVUFBWXVJLFlBQVlHLFlBQzdCN0ksS0FBSzJDLFlBQVltRyxVQUFVOUksS0FBS0csV0FDaENILEtBQUsyQyxZQUFZOEYsT0FFakJDLFlBQVlLLE9BU2hCcEosVUFBVUUsVUFBVW1KLFFBQVUsU0FBU0MsRUFBSUMsRUFBT0MsR0FHOUMsSUFBSyxHQUREQyxHQUFNcEosS0FBS0UsYUFBYW1KLGdCQUNuQmxJLEVBQUksRUFBR0EsRUFBSWlJLEVBQUtqSSxJQUVyQixHQUFJOEgsR0FBTWpKLEtBQUtFLGFBQWFvSixlQUFlbkksR0FDM0MsQ0FDSSxHQUFJb0ksR0FBU3ZKLEtBQUtFLGFBQWFzSixhQUFhckksRUFFNUMsT0FBT25CLE1BQUt5SixjQUFjRixFQUFRTCxFQUFPQyxHQUlqRCxPQUFPIiwiZmlsZSI6IkxpdmUyRC9zcmMvTEFwcE1vZGVsLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbi8vICBjbGFzcyBMQXBwTW9kZWwgICAgIGV4dGVuZHMgTDJEQmFzZU1vZGVsICAgICAgICAgXHJcbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbi8vPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbmZ1bmN0aW9uIExBcHBNb2RlbCgpXHJcbntcclxuICAgIC8vTDJEQmFzZU1vZGVsLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XHJcbiAgICBMMkRCYXNlTW9kZWwucHJvdG90eXBlLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7XHJcbiAgICBcclxuICAgIHRoaXMubW9kZWxIb21lRGlyID0gXCJcIjtcclxuICAgIHRoaXMubW9kZWxTZXR0aW5nID0gbnVsbDtcclxuICAgIHRoaXMudG1wTWF0cml4ID0gW107XHJcbn1cclxuXHJcbkxBcHBNb2RlbC5wcm90b3R5cGUgPSBuZXcgTDJEQmFzZU1vZGVsKCk7XHJcblxyXG4vKlxyXG4gKiDjg6Ljg4fjg6vjgpLliJ3mnJ/ljJbjgZnjgotcclxuICovXHJcbkxBcHBNb2RlbC5wcm90b3R5cGUubG9hZCA9IGZ1bmN0aW9uKGdsLCBtb2RlbFNldHRpbmdQYXRoLCBjYWxsYmFjaylcclxue1xyXG4gICAgdGhpcy5zZXRVcGRhdGluZyh0cnVlKTtcclxuICAgIHRoaXMuc2V0SW5pdGlhbGl6ZWQoZmFsc2UpO1xyXG5cclxuICAgIHRoaXMubW9kZWxIb21lRGlyID0gbW9kZWxTZXR0aW5nUGF0aC5zdWJzdHJpbmcoMCwgbW9kZWxTZXR0aW5nUGF0aC5sYXN0SW5kZXhPZihcIi9cIikgKyAxKTsgXHJcblxyXG4gICAgdGhpcy5tb2RlbFNldHRpbmcgPSBuZXcgTW9kZWxTZXR0aW5nSnNvbigpO1xyXG4gICAgXHJcbiAgICB2YXIgdGhpc1JlZiA9IHRoaXM7XHJcbiAgICBcclxuICAgIHRoaXMubW9kZWxTZXR0aW5nLmxvYWRNb2RlbFNldHRpbmcobW9kZWxTZXR0aW5nUGF0aCwgZnVuY3Rpb24oKXtcclxuICAgICAgICAvLyDjg6Ljg4fjg6vjg4fjg7zjgr/jgpLoqq3jgb/ovrzjgoBcclxuICAgICAgICB2YXIgcGF0aCA9IHRoaXNSZWYubW9kZWxIb21lRGlyICsgdGhpc1JlZi5tb2RlbFNldHRpbmcuZ2V0TW9kZWxGaWxlKCk7XHJcbiAgICAgICAgdGhpc1JlZi5sb2FkTW9kZWxEYXRhKHBhdGgsIGZ1bmN0aW9uKG1vZGVsKXtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpc1JlZi5tb2RlbFNldHRpbmcuZ2V0VGV4dHVyZU51bSgpOyBpKyspXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIC8vIOODhuOCr+OCueODgeODo+OCkuiqreOBv+i+vOOCgFxyXG4gICAgICAgICAgICAgICAgdmFyIHRleFBhdGhzID0gdGhpc1JlZi5tb2RlbEhvbWVEaXIgKyBcclxuICAgICAgICAgICAgICAgICAgICB0aGlzUmVmLm1vZGVsU2V0dGluZy5nZXRUZXh0dXJlRmlsZShpKTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgdGhpc1JlZi5sb2FkVGV4dHVyZShpLCB0ZXhQYXRocywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8g44GZ44G544Gm44Gu44OG44Kv44K544OB44Oj44KS6Kqt44G/6L6844KT44Gg5b6M44Gu5Yem55CGXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoIHRoaXNSZWYuaXNUZXhMb2FkZWQgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIOihqOaDhVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpc1JlZi5tb2RlbFNldHRpbmcuZ2V0RXhwcmVzc2lvbk51bSgpID4gMClcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8g5Y+k44GE6KGo5oOF44KS5YmK6ZmkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzUmVmLmV4cHJlc3Npb25zID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdGhpc1JlZi5tb2RlbFNldHRpbmcuZ2V0RXhwcmVzc2lvbk51bSgpOyBqKyspXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV4cE5hbWUgPSB0aGlzUmVmLm1vZGVsU2V0dGluZy5nZXRFeHByZXNzaW9uTmFtZShqKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXhwRmlsZVBhdGggPSB0aGlzUmVmLm1vZGVsSG9tZURpciArIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzUmVmLm1vZGVsU2V0dGluZy5nZXRFeHByZXNzaW9uRmlsZShqKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzUmVmLmxvYWRFeHByZXNzaW9uKGV4cE5hbWUsIGV4cEZpbGVQYXRoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNSZWYuZXhwcmVzc2lvbk1hbmFnZXIgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1JlZi5leHByZXNzaW9ucyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8g6Ieq5YuV55uu44OR44OBXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzUmVmLmV5ZUJsaW5rID09IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNSZWYuZXllQmxpbmsgPSBuZXcgTDJERXllQmxpbmsoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8g54mp55CG5ryU566XXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzUmVmLm1vZGVsU2V0dGluZy5nZXRQaHlzaWNzRmlsZSgpICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNSZWYubG9hZFBoeXNpY3ModGhpc1JlZi5tb2RlbEhvbWVEaXIgKyBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1JlZi5tb2RlbFNldHRpbmcuZ2V0UGh5c2ljc0ZpbGUoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzUmVmLnBoeXNpY3MgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8g44OR44O844OE5YiH44KK5pu/44GIXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzUmVmLm1vZGVsU2V0dGluZy5nZXRQb3NlRmlsZSgpICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNSZWYubG9hZFBvc2UoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1JlZi5tb2RlbEhvbWVEaXIgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNSZWYubW9kZWxTZXR0aW5nLmdldFBvc2VGaWxlKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNSZWYucG9zZS51cGRhdGVQYXJhbSh0aGlzUmVmLmxpdmUyRE1vZGVsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1JlZi5wb3NlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIOODrOOCpOOCouOCpuODiFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpc1JlZi5tb2RlbFNldHRpbmcuZ2V0TGF5b3V0KCkgIT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxheW91dCA9IHRoaXNSZWYubW9kZWxTZXR0aW5nLmdldExheW91dCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxheW91dFtcIndpZHRoXCJdICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1JlZi5tb2RlbE1hdHJpeC5zZXRXaWR0aChsYXlvdXRbXCJ3aWR0aFwiXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF5b3V0W1wiaGVpZ2h0XCJdICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1JlZi5tb2RlbE1hdHJpeC5zZXRIZWlnaHQobGF5b3V0W1wiaGVpZ2h0XCJdKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF5b3V0W1wieFwiXSAhPSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNSZWYubW9kZWxNYXRyaXguc2V0WChsYXlvdXRbXCJ4XCJdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXlvdXRbXCJ5XCJdICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1JlZi5tb2RlbE1hdHJpeC5zZXRZKGxheW91dFtcInlcIl0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxheW91dFtcImNlbnRlcl94XCJdICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1JlZi5tb2RlbE1hdHJpeC5jZW50ZXJYKGxheW91dFtcImNlbnRlcl94XCJdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXlvdXRbXCJjZW50ZXJfeVwiXSAhPSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNSZWYubW9kZWxNYXRyaXguY2VudGVyWShsYXlvdXRbXCJjZW50ZXJfeVwiXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF5b3V0W1widG9wXCJdICE9IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1JlZi5tb2RlbE1hdHJpeC50b3AobGF5b3V0W1widG9wXCJdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXlvdXRbXCJib3R0b21cIl0gIT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzUmVmLm1vZGVsTWF0cml4LmJvdHRvbShsYXlvdXRbXCJib3R0b21cIl0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxheW91dFtcImxlZnRcIl0gIT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzUmVmLm1vZGVsTWF0cml4LmxlZnQobGF5b3V0W1wibGVmdFwiXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF5b3V0W1wicmlnaHRcIl0gIT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzUmVmLm1vZGVsTWF0cml4LnJpZ2h0KGxheW91dFtcInJpZ2h0XCJdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB0aGlzUmVmLm1vZGVsU2V0dGluZy5nZXRJbml0UGFyYW1OdW0oKTsgaisrKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDjg5Hjg6njg6Hjg7zjgr/jgpLkuIrmm7jjgY1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNSZWYubGl2ZTJETW9kZWwuc2V0UGFyYW1GbG9hdChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzUmVmLm1vZGVsU2V0dGluZy5nZXRJbml0UGFyYW1JRChqKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzUmVmLm1vZGVsU2V0dGluZy5nZXRJbml0UGFyYW1WYWx1ZShqKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB0aGlzUmVmLm1vZGVsU2V0dGluZy5nZXRJbml0UGFydHNWaXNpYmxlTnVtKCk7IGorKylcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8g44OR44O844OE44Gu6YCP5piO5bqm44KS6Kit5a6aXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzUmVmLmxpdmUyRE1vZGVsLnNldFBhcnRzT3BhY2l0eShcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzUmVmLm1vZGVsU2V0dGluZy5nZXRJbml0UGFydHNWaXNpYmxlSUQoaiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1JlZi5tb2RlbFNldHRpbmcuZ2V0SW5pdFBhcnRzVmlzaWJsZVZhbHVlKGopXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8g44OR44Op44Oh44O844K/44KS5L+d5a2Y44CC5qyh5Zue44GubG9hZFBhcmFt44Gn6Kqt44G/44Gg44GV44KM44KLXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNSZWYubGl2ZTJETW9kZWwuc2F2ZVBhcmFtKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoaXNSZWYubGl2ZTJETW9kZWwuc2V0R0woZ2wpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8g44Ki44Kk44OJ44Oq44Oz44Kw44Gv44GC44KJ44GL44GY44KB6Kqt44G/6L6844KT44Gn44GK44GP44CCXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNSZWYucHJlbG9hZE1vdGlvbkdyb3VwKExBcHBEZWZpbmUuTU9USU9OX0dST1VQX0lETEUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzUmVmLm1haW5Nb3Rpb25NYW5hZ2VyLnN0b3BBbGxNb3Rpb25zKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzUmVmLnNldFVwZGF0aW5nKGZhbHNlKTsgLy8g5pu05paw54q25oWL44Gu5a6M5LqGXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNSZWYuc2V0SW5pdGlhbGl6ZWQodHJ1ZSk7IC8vIOWIneacn+WMluWujOS6hlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PSBcImZ1bmN0aW9uXCIpIGNhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufTtcclxuXHJcblxyXG4vKlxyXG4gKiBHQ+OBoOOBkeOBp+ino+aUvuOBleOCjOOBquOBhOODoeODouODquOCkuino+aUvlxyXG4gKi9cclxuTEFwcE1vZGVsLnByb3RvdHlwZS5yZWxlYXNlID0gZnVuY3Rpb24oZ2wpXHJcbntcclxuICAgIC8vIHRoaXMubGl2ZTJETW9kZWwuZGVsZXRlVGV4dHVyZXMoKTtcclxuICAgIHZhciBwbSA9IExpdmUyREZyYW1ld29yay5nZXRQbGF0Zm9ybU1hbmFnZXIoKTtcclxuXHJcbiAgICBnbC5kZWxldGVUZXh0dXJlKHBtLnRleHR1cmUpO1xyXG59XHJcblxyXG5cclxuLypcclxuICog44Oi44O844K344On44Oz44OV44Kh44Kk44Or44KS44GC44KJ44GL44GY44KB6Kqt44G/6L6844KAXHJcbiAqL1xyXG5MQXBwTW9kZWwucHJvdG90eXBlLnByZWxvYWRNb3Rpb25Hcm91cCA9IGZ1bmN0aW9uKG5hbWUpXHJcbntcclxuICAgIHZhciB0aGlzUmVmID0gdGhpcztcclxuICAgIFxyXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLm1vZGVsU2V0dGluZy5nZXRNb3Rpb25OdW0obmFtZSk7IGkrKylcclxuICAgIHtcclxuICAgICAgICB2YXIgZmlsZSA9IHRoaXMubW9kZWxTZXR0aW5nLmdldE1vdGlvbkZpbGUobmFtZSwgaSk7XHJcbiAgICAgICAgdGhpcy5sb2FkTW90aW9uKGZpbGUsIHRoaXMubW9kZWxIb21lRGlyICsgZmlsZSwgZnVuY3Rpb24obW90aW9uKSB7XHJcbiAgICAgICAgICAgIG1vdGlvbi5zZXRGYWRlSW4odGhpc1JlZi5tb2RlbFNldHRpbmcuZ2V0TW90aW9uRmFkZUluKG5hbWUsIGkpKTtcclxuICAgICAgICAgICAgbW90aW9uLnNldEZhZGVPdXQodGhpc1JlZi5tb2RlbFNldHRpbmcuZ2V0TW90aW9uRmFkZU91dChuYW1lLCBpKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5MQXBwTW9kZWwucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKClcclxue1xyXG4gICAgLy8gY29uc29sZS5sb2coXCItLT4gTEFwcE1vZGVsLnVwZGF0ZSgpXCIpO1xyXG5cclxuICAgIGlmKHRoaXMubGl2ZTJETW9kZWwgPT0gbnVsbCkgXHJcbiAgICB7XHJcbiAgICAgICAgaWYgKExBcHBEZWZpbmUuREVCVUdfTE9HKSBjb25zb2xlLmVycm9yKFwiRmFpbGVkIHRvIHVwZGF0ZS5cIik7XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICB2YXIgdGltZU1TZWMgPSBVdFN5c3RlbS5nZXRVc2VyVGltZU1TZWMoKSAtIHRoaXMuc3RhcnRUaW1lTVNlYztcclxuICAgIHZhciB0aW1lU2VjID0gdGltZU1TZWMgLyAxMDAwLjA7XHJcbiAgICB2YXIgdCA9IHRpbWVTZWMgKiAyICogTWF0aC5QSTsgLy8gMs+AdFxyXG4gICAgXHJcbiAgICAvLyDlvoXmqZ/jg6Ljg7zjgrfjg6fjg7PliKTlrppcclxuICAgIGlmICh0aGlzLm1haW5Nb3Rpb25NYW5hZ2VyLmlzRmluaXNoZWQoKSlcclxuICAgIHtcclxuICAgICAgICAvLyDjg6Ljg7zjgrfjg6fjg7Pjga7lho3nlJ/jgYzjgarjgYTloLTlkIjjgIHlvoXmqZ/jg6Ljg7zjgrfjg6fjg7Pjga7kuK3jgYvjgonjg6njg7Pjg4Djg6Djgaflho3nlJ/jgZnjgotcclxuICAgICAgICB0aGlzLnN0YXJ0UmFuZG9tTW90aW9uKExBcHBEZWZpbmUuTU9USU9OX0dST1VQX0lETEUsIExBcHBEZWZpbmUuUFJJT1JJVFlfSURMRSk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cdFx0XHJcbiAgICBcclxuICAgIC8vIOWJjeWbnuOCu+ODvOODluOBleOCjOOBn+eKtuaFi+OCkuODreODvOODiVxyXG4gICAgdGhpcy5saXZlMkRNb2RlbC5sb2FkUGFyYW0oKTtcclxuICAgIFxyXG4gICAgLyog44Kk44Oz44K544K/44Oz44K544GM5L2c44KJ44KM44Gm44GE44Gf44KJ5pu05pawICovXHJcbiAgICBcclxuICAgIHZhciB1cGRhdGUgPSB0aGlzLm1haW5Nb3Rpb25NYW5hZ2VyLnVwZGF0ZVBhcmFtKHRoaXMubGl2ZTJETW9kZWwpOyAvLyDjg6Ljg7zjgrfjg6fjg7PjgpLmm7TmlrBcclxuICAgIGlmICghdXBkYXRlKSB7XHJcbiAgICAgICAgLy8g55uu44Gx44GhXHJcbiAgICAgICAgaWYodGhpcy5leWVCbGluayAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZXllQmxpbmsudXBkYXRlUGFyYW0odGhpcy5saXZlMkRNb2RlbCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIOeKtuaFi+OCkuS/neWtmFxyXG4gICAgdGhpcy5saXZlMkRNb2RlbC5zYXZlUGFyYW0oKTtcclxuICAgIFxyXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVx0XHRcclxuICAgIFxyXG4gICAgLy8g6KGo5oOF44Gn44OR44Op44Oh44O844K/5pu05paw77yI55u45a++5aSJ5YyW77yJXHJcbiAgICBpZiAodGhpcy5leHByZXNzaW9uTWFuYWdlciAhPSBudWxsICYmIFxyXG4gICAgICAgIHRoaXMuZXhwcmVzc2lvbnMgIT0gbnVsbCAmJiBcclxuICAgICAgICAhdGhpcy5leHByZXNzaW9uTWFuYWdlci5pc0ZpbmlzaGVkKCkpXHJcbiAgICB7XHJcbiAgICAgICAgdGhpcy5leHByZXNzaW9uTWFuYWdlci51cGRhdGVQYXJhbSh0aGlzLmxpdmUyRE1vZGVsKTsgXHJcbiAgICB9XHJcblxyXG4gICAgLy8g44OJ44Op44OD44Kw44Gr44KI44KL6aGU44Gu5ZCR44GN44Gu6Kq/5pW0XHJcbiAgICAvLyAtMzDjgYvjgokzMOOBruWApOOCkuWKoOOBiOOCi1xyXG4gICAgdGhpcy5saXZlMkRNb2RlbC5hZGRUb1BhcmFtRmxvYXQoXCJQQVJBTV9BTkdMRV9YXCIsIHRoaXMuZHJhZ1ggKiAzMCwgMSk7IFxyXG4gICAgdGhpcy5saXZlMkRNb2RlbC5hZGRUb1BhcmFtRmxvYXQoXCJQQVJBTV9BTkdMRV9ZXCIsIHRoaXMuZHJhZ1kgKiAzMCwgMSk7XHJcbiAgICB0aGlzLmxpdmUyRE1vZGVsLmFkZFRvUGFyYW1GbG9hdChcIlBBUkFNX0FOR0xFX1pcIiwgKHRoaXMuZHJhZ1ggKiB0aGlzLmRyYWdZKSAqIC0zMCwgMSk7XHJcblxyXG4gICAgLy8g44OJ44Op44OD44Kw44Gr44KI44KL5L2T44Gu5ZCR44GN44Gu6Kq/5pW0XHJcbiAgICAvLyAtMTDjgYvjgokxMOOBruWApOOCkuWKoOOBiOOCi1xyXG4gICAgdGhpcy5saXZlMkRNb2RlbC5hZGRUb1BhcmFtRmxvYXQoXCJQQVJBTV9CT0RZX0FOR0xFX1hcIiwgdGhpcy5kcmFnWCoxMCwgMSk7IFxyXG5cclxuICAgIC8vIOODieODqeODg+OCsOOBq+OCiOOCi+ebruOBruWQkeOBjeOBruiqv+aVtFxyXG4gICAgLy8gLTHjgYvjgokx44Gu5YCk44KS5Yqg44GI44KLXHJcbiAgICB0aGlzLmxpdmUyRE1vZGVsLmFkZFRvUGFyYW1GbG9hdChcIlBBUkFNX0VZRV9CQUxMX1hcIiwgdGhpcy5kcmFnWCwgMSk7IFxyXG4gICAgdGhpcy5saXZlMkRNb2RlbC5hZGRUb1BhcmFtRmxvYXQoXCJQQVJBTV9FWUVfQkFMTF9ZXCIsIHRoaXMuZHJhZ1ksIDEpO1xyXG5cclxuXHJcbiAgICAvLyDlkbzlkLjjgarjgalcclxuICAgIHRoaXMubGl2ZTJETW9kZWwuYWRkVG9QYXJhbUZsb2F0KFwiUEFSQU1fQU5HTEVfWFwiLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE51bWJlcigoMTUgKiBNYXRoLnNpbih0IC8gNi41MzQ1KSkpLCAwLjUpO1xyXG4gICAgdGhpcy5saXZlMkRNb2RlbC5hZGRUb1BhcmFtRmxvYXQoXCJQQVJBTV9BTkdMRV9ZXCIsIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTnVtYmVyKCg4ICogTWF0aC5zaW4odCAvIDMuNTM0NSkpKSwgMC41KTtcclxuICAgIHRoaXMubGl2ZTJETW9kZWwuYWRkVG9QYXJhbUZsb2F0KFwiUEFSQU1fQU5HTEVfWlwiLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE51bWJlcigoMTAgKiBNYXRoLnNpbih0IC8gNS41MzQ1KSkpLCAwLjUpO1xyXG4gICAgdGhpcy5saXZlMkRNb2RlbC5hZGRUb1BhcmFtRmxvYXQoXCJQQVJBTV9CT0RZX0FOR0xFX1hcIiwgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOdW1iZXIoKDQgKiBNYXRoLnNpbih0IC8gMTUuNTM0NSkpKSwgMC41KTtcclxuICAgIHRoaXMubGl2ZTJETW9kZWwuc2V0UGFyYW1GbG9hdChcIlBBUkFNX0JSRUFUSFwiLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBOdW1iZXIoKDAuNSArIDAuNSAqIE1hdGguc2luKHQgLyAzLjIzNDUpKSksIDEpO1xyXG4gICAgXHJcbiAgICAvLyDniannkIbmvJTnrpdcclxuICAgIGlmICh0aGlzLnBoeXNpY3MgIT0gbnVsbClcclxuICAgIHtcclxuICAgICAgICB0aGlzLnBoeXNpY3MudXBkYXRlUGFyYW0odGhpcy5saXZlMkRNb2RlbCk7IC8vIOeJqeeQhua8lOeul+OBp+ODkeODqeODoeODvOOCv+abtOaWsFxyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyDjg6rjg4Pjg5fjgrfjg7Pjgq/jga7oqK3lrppcclxuICAgIGlmICh0aGlzLmxpcFN5bmMgPT0gbnVsbClcclxuICAgIHtcclxuICAgICAgICB0aGlzLmxpdmUyRE1vZGVsLnNldFBhcmFtRmxvYXQoXCJQQVJBTV9NT1VUSF9PUEVOX1lcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5saXBTeW5jVmFsdWUpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyDjg53jg7zjgrpcclxuICAgIGlmKCB0aGlzLnBvc2UgIT0gbnVsbCApIHtcclxuICAgICAgICB0aGlzLnBvc2UudXBkYXRlUGFyYW0odGhpcy5saXZlMkRNb2RlbCk7XHJcbiAgICB9XHJcbiAgICAgICAgXHJcbiAgICB0aGlzLmxpdmUyRE1vZGVsLnVwZGF0ZSgpO1xyXG59O1xyXG5cclxuXHJcbi8qXHJcbiAqIOihqOaDheOCkuODqeODs+ODgOODoOOBq+WIh+OCiuabv+OBiOOCi1xyXG4gKi9cclxuTEFwcE1vZGVsLnByb3RvdHlwZS5zZXRSYW5kb21FeHByZXNzaW9uID0gZnVuY3Rpb24oKVxyXG57XHJcbiAgICB2YXIgdG1wID0gW107XHJcbiAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMuZXhwcmVzc2lvbnMpXHJcbiAgICB7XHJcbiAgICAgICAgdG1wLnB1c2gobmFtZSk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIG5vID0gcGFyc2VJbnQoTWF0aC5yYW5kb20oKSAqIHRtcC5sZW5ndGgpO1xyXG5cclxuICAgIHRoaXMuc2V0RXhwcmVzc2lvbih0bXBbbm9dKTtcclxufVxyXG5cclxuXHJcbi8qXHJcbiAqIOODouODvOOCt+ODp+ODs+OCkuODqeODs+ODgOODoOOBp+WGjeeUn+OBmeOCi1xyXG4gKi9cclxuTEFwcE1vZGVsLnByb3RvdHlwZS5zdGFydFJhbmRvbU1vdGlvbiA9IGZ1bmN0aW9uKG5hbWUsIHByaW9yaXR5KVxyXG57XHJcbiAgICB2YXIgbWF4ID0gdGhpcy5tb2RlbFNldHRpbmcuZ2V0TW90aW9uTnVtKG5hbWUpO1xyXG4gICAgdmFyIG5vID0gcGFyc2VJbnQoTWF0aC5yYW5kb20oKSAqIG1heCk7XHJcbiAgICB0aGlzLnN0YXJ0TW90aW9uKG5hbWUsIG5vLCBwcmlvcml0eSk7XHJcbn1cclxuXHJcblxyXG4vKlxyXG4gKiDjg6Ljg7zjgrfjg6fjg7Pjga7plovlp4vjgIJcclxuICog5YaN55Sf44Gn44GN44KL54q25oWL44GL44OB44Kn44OD44Kv44GX44Gm44CB44Gn44GN44Gq44GR44KM44Gw5L2V44KC44GX44Gq44GE44CCXHJcbiAqIOWGjeeUn+WHuuadpeOCi+WgtOWQiOOBr+iHquWLleOBp+ODleOCoeOCpOODq+OCkuiqreOBv+i+vOOCk+OBp+WGjeeUn+OAglxyXG4gKiDpn7Plo7Dku5jjgY3jgarjgonjgZ3jgozjgoLlho3nlJ/jgIJcclxuICog44OV44Kn44O844OJ44Kk44Oz44CB44OV44Kn44O844OJ44Ki44Km44OI44Gu5oOF5aCx44GM44GC44KM44Gw44GT44GT44Gn6Kit5a6a44CC44Gq44GR44KM44Gw5Yid5pyf5YCk44CCXHJcbiAqL1xyXG5MQXBwTW9kZWwucHJvdG90eXBlLnN0YXJ0TW90aW9uID0gZnVuY3Rpb24obmFtZSwgbm8sIHByaW9yaXR5KVxyXG57XHJcbiAgICAvLyBjb25zb2xlLmxvZyhcInN0YXJ0TW90aW9uIDogXCIgKyBuYW1lICsgXCIgXCIgKyBubyArIFwiIFwiICsgcHJpb3JpdHkpO1xyXG4gICAgXHJcbiAgICB2YXIgbW90aW9uTmFtZSA9IHRoaXMubW9kZWxTZXR0aW5nLmdldE1vdGlvbkZpbGUobmFtZSwgbm8pO1xyXG4gICAgXHJcbiAgICBpZiAobW90aW9uTmFtZSA9PSBudWxsIHx8IG1vdGlvbk5hbWUgPT0gXCJcIilcclxuICAgIHtcclxuICAgICAgICBpZiAoTEFwcERlZmluZS5ERUJVR19MT0cpXHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJGYWlsZWQgdG8gbW90aW9uLlwiKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHByaW9yaXR5ID09IExBcHBEZWZpbmUuUFJJT1JJVFlfRk9SQ0UpIFxyXG4gICAge1xyXG4gICAgICAgIHRoaXMubWFpbk1vdGlvbk1hbmFnZXIuc2V0UmVzZXJ2ZVByaW9yaXR5KHByaW9yaXR5KTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKCF0aGlzLm1haW5Nb3Rpb25NYW5hZ2VyLnJlc2VydmVNb3Rpb24ocHJpb3JpdHkpKVxyXG4gICAge1xyXG4gICAgICAgIGlmIChMQXBwRGVmaW5lLkRFQlVHX0xPRylcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJNb3Rpb24gaXMgcnVubmluZy5cIilcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIHRoaXNSZWYgPSB0aGlzO1xyXG4gICAgdmFyIG1vdGlvbjtcclxuXHJcbiAgICBpZiAodGhpcy5tb3Rpb25zW25hbWVdID09IG51bGwpIFxyXG4gICAge1xyXG4gICAgICAgIHRoaXMubG9hZE1vdGlvbihudWxsLCB0aGlzLm1vZGVsSG9tZURpciArIG1vdGlvbk5hbWUsIGZ1bmN0aW9uKG10bikge1xyXG4gICAgICAgICAgICBtb3Rpb24gPSBtdG47XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyDjg5Xjgqfjg7zjg4njgqTjg7PjgIHjg5Xjgqfjg7zjg4njgqLjgqbjg4jjga7oqK3lrppcclxuICAgICAgICAgICAgdGhpc1JlZi5zZXRGYWRlSW5GYWRlT3V0KG5hbWUsIG5vLCBwcmlvcml0eSwgbW90aW9uKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIFxyXG4gICAge1xyXG4gICAgICAgIG1vdGlvbiA9IHRoaXMubW90aW9uc1tuYW1lXTtcclxuICAgICAgICBcclxuICAgICAgICAvLyDjg5Xjgqfjg7zjg4njgqTjg7PjgIHjg5Xjgqfjg7zjg4njgqLjgqbjg4jjga7oqK3lrppcclxuICAgICAgICB0aGlzUmVmLnNldEZhZGVJbkZhZGVPdXQobmFtZSwgbm8sIHByaW9yaXR5LCBtb3Rpb24pO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuTEFwcE1vZGVsLnByb3RvdHlwZS5zZXRGYWRlSW5GYWRlT3V0ID0gZnVuY3Rpb24obmFtZSwgbm8sIHByaW9yaXR5LCBtb3Rpb24pXHJcbntcclxuICAgIHZhciBtb3Rpb25OYW1lID0gdGhpcy5tb2RlbFNldHRpbmcuZ2V0TW90aW9uRmlsZShuYW1lLCBubyk7XHJcbiAgICBcclxuICAgIG1vdGlvbi5zZXRGYWRlSW4odGhpcy5tb2RlbFNldHRpbmcuZ2V0TW90aW9uRmFkZUluKG5hbWUsIG5vKSk7XHJcbiAgICBtb3Rpb24uc2V0RmFkZU91dCh0aGlzLm1vZGVsU2V0dGluZy5nZXRNb3Rpb25GYWRlT3V0KG5hbWUsIG5vKSk7XHJcbiAgICBcclxuICAgIFxyXG4gICAgaWYgKExBcHBEZWZpbmUuREVCVUdfTE9HKVxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIlN0YXJ0IG1vdGlvbiA6IFwiICsgbW90aW9uTmFtZSk7XHJcblxyXG4gICAgaWYgKHRoaXMubW9kZWxTZXR0aW5nLmdldE1vdGlvblNvdW5kKG5hbWUsIG5vKSA9PSBudWxsKVxyXG4gICAge1xyXG4gICAgICAgIHRoaXMubWFpbk1vdGlvbk1hbmFnZXIuc3RhcnRNb3Rpb25QcmlvKG1vdGlvbiwgcHJpb3JpdHkpO1xyXG4gICAgfVxyXG4gICAgZWxzZVxyXG4gICAge1xyXG4gICAgICAgIHZhciBzb3VuZE5hbWUgPSB0aGlzLm1vZGVsU2V0dGluZy5nZXRNb3Rpb25Tb3VuZChuYW1lLCBubyk7XHJcbiAgICAgICAgLy8gdmFyIHBsYXllciA9IG5ldyBTb3VuZCh0aGlzLm1vZGVsSG9tZURpciArIHNvdW5kTmFtZSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdmFyIHNuZCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhdWRpb1wiKTtcclxuICAgICAgICBzbmQuc3JjID0gdGhpcy5tb2RlbEhvbWVEaXIgKyBzb3VuZE5hbWU7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKExBcHBEZWZpbmUuREVCVUdfTE9HKVxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIlN0YXJ0IHNvdW5kIDogXCIgKyBzb3VuZE5hbWUpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHNuZC5wbGF5KCk7XHJcbiAgICAgICAgdGhpcy5tYWluTW90aW9uTWFuYWdlci5zdGFydE1vdGlvblByaW8obW90aW9uLCBwcmlvcml0eSk7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4vKlxyXG4gKiDooajmg4XjgpLoqK3lrprjgZnjgotcclxuICovXHJcbkxBcHBNb2RlbC5wcm90b3R5cGUuc2V0RXhwcmVzc2lvbiA9IGZ1bmN0aW9uKG5hbWUpXHJcbntcclxuICAgIHZhciBtb3Rpb24gPSB0aGlzLmV4cHJlc3Npb25zW25hbWVdO1xyXG4gICAgXHJcbiAgICBpZiAoTEFwcERlZmluZS5ERUJVR19MT0cpXHJcbiAgICAgICAgY29uc29sZS5sb2coXCJFeHByZXNzaW9uIDogXCIgKyBuYW1lKTtcclxuICAgICAgICBcclxuICAgIHRoaXMuZXhwcmVzc2lvbk1hbmFnZXIuc3RhcnRNb3Rpb24obW90aW9uLCBmYWxzZSk7XHJcbn1cclxuXHJcblxyXG4vKlxyXG4gKiDmj4/nlLtcclxuICovXHJcbkxBcHBNb2RlbC5wcm90b3R5cGUuZHJhdyA9IGZ1bmN0aW9uKGdsKVxyXG57XHJcbiAgICAvL2NvbnNvbGUubG9nKFwiLS0+IExBcHBNb2RlbC5kcmF3KClcIik7XHJcbiAgICBcclxuICAgIC8vIGlmKHRoaXMubGl2ZTJETW9kZWwgPT0gbnVsbCkgcmV0dXJuO1xyXG4gICAgXHJcbiAgICAvLyDpgJrluLhcclxuICAgIE1hdHJpeFN0YWNrLnB1c2goKTtcclxuICAgIFxyXG4gICAgTWF0cml4U3RhY2subXVsdE1hdHJpeCh0aGlzLm1vZGVsTWF0cml4LmdldEFycmF5KCkpO1xyXG4gICAgXHJcbiAgICB0aGlzLnRtcE1hdHJpeCA9IE1hdHJpeFN0YWNrLmdldE1hdHJpeCgpXHJcbiAgICB0aGlzLmxpdmUyRE1vZGVsLnNldE1hdHJpeCh0aGlzLnRtcE1hdHJpeCk7XHJcbiAgICB0aGlzLmxpdmUyRE1vZGVsLmRyYXcoKTtcclxuICAgIFxyXG4gICAgTWF0cml4U3RhY2sucG9wKCk7XHJcbiAgICBcclxufTtcclxuICAgICAgICBcclxuXHJcbi8qXHJcbiAqIOW9k+OBn+OCiuWIpOWumuOBqOOBruewoeaYk+ODhuOCueODiOOAglxyXG4gKiDmjIflrppJROOBrumggueCueODquOCueODiOOBi+OCieOBneOCjOOCieOCkuWQq+OCgOacgOWkp+OBruefqeW9ouOCkuioiOeul+OBl+OAgeeCueOBjOOBneOBk+OBq+WQq+OBvuOCjOOCi+OBi+WIpOWumlxyXG4gKi9cclxuTEFwcE1vZGVsLnByb3RvdHlwZS5oaXRUZXN0ID0gZnVuY3Rpb24oaWQsIHRlc3RYLCB0ZXN0WSlcclxue1xyXG4gICAgdmFyIGxlbiA9IHRoaXMubW9kZWxTZXR0aW5nLmdldEhpdEFyZWFOdW0oKTtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspXHJcbiAgICB7ICAgICAgICBcclxuICAgICAgICBpZiAoaWQgPT0gdGhpcy5tb2RlbFNldHRpbmcuZ2V0SGl0QXJlYU5hbWUoaSkpXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB2YXIgZHJhd0lEID0gdGhpcy5tb2RlbFNldHRpbmcuZ2V0SGl0QXJlYUlEKGkpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaGl0VGVzdFNpbXBsZShkcmF3SUQsIHRlc3RYLCB0ZXN0WSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICByZXR1cm4gZmFsc2U7IC8vIOWtmOWcqOOBl+OBquOBhOWgtOWQiOOBr2ZhbHNlXHJcbn1cclxuIl19
