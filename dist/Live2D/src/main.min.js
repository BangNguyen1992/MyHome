"use strict";function myApp(){this.platform=window.navigator.platform.toLowerCase(),this.live2DMgr=new LAppLive2DManager,this.isDrawStart=!1,this.gl=null,this.canvas=null,this.dragMgr=null,this.viewMatrix=null,this.projMatrix=null,this.deviceToScreen=null,this.drag=!1,this.oldLen=0,this.lastMouseX=0,this.lastMouseY=0,this.isModelShown=!1,initL2dCanvas("glcanvas"),init()}function initL2dCanvas(e){this.canvas=document.getElementById(e),this.canvas.addEventListener&&(this.canvas.addEventListener("mousewheel",mouseEvent,!1),this.canvas.addEventListener("click",mouseEvent,!1),this.canvas.addEventListener("mousedown",mouseEvent,!1),this.canvas.addEventListener("mousemove",mouseEvent,!1),this.canvas.addEventListener("mouseup",mouseEvent,!1),this.canvas.addEventListener("mouseout",mouseEvent,!1),this.canvas.addEventListener("contextmenu",mouseEvent,!1),this.canvas.addEventListener("touchstart",touchEvent,!1),this.canvas.addEventListener("touchend",touchEvent,!1),this.canvas.addEventListener("touchmove",touchEvent,!1)),btnChangeModel=document.getElementById("btnChange"),btnChangeModel.addEventListener("click",function(e){changeModel()})}function init(){var e=this.canvas.width,t=this.canvas.height;this.dragMgr=new L2DTargetPoint;var i=t/e,n=LAppDefine.VIEW_LOGICAL_LEFT,r=LAppDefine.VIEW_LOGICAL_RIGHT,a=-i,s=i;return this.viewMatrix=new L2DViewMatrix,this.viewMatrix.setScreenRect(n,r,a,s),this.viewMatrix.setMaxScreenRect(LAppDefine.VIEW_LOGICAL_MAX_LEFT,LAppDefine.VIEW_LOGICAL_MAX_RIGHT,LAppDefine.VIEW_LOGICAL_MAX_BOTTOM,LAppDefine.VIEW_LOGICAL_MAX_TOP),this.viewMatrix.setMaxScale(LAppDefine.VIEW_MAX_SCALE),this.viewMatrix.setMinScale(LAppDefine.VIEW_MIN_SCALE),this.projMatrix=new L2DMatrix44,this.projMatrix.multScale(1,e/t),this.deviceToScreen=new L2DMatrix44,this.deviceToScreen.multTranslate(-e/2,-t/2),this.deviceToScreen.multScale(2/e,-2/e),this.gl=getWebGLContext(),this.gl?(Live2D.setGL(this.gl),this.gl.clearColor(0,0,0,0),changeModel(),void startDraw()):void l2dError("Failed to create WebGL context.")}function startDraw(){this.isDrawStart||(this.isDrawStart=!0,function e(){draw();var t=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame;t(e,this.canvas)}())}function draw(){MatrixStack.reset(),MatrixStack.loadIdentity(),this.dragMgr.update(),this.live2DMgr.setDrag(this.dragMgr.getX(),this.dragMgr.getY()),this.gl.clear(this.gl.COLOR_BUFFER_BIT),MatrixStack.multMatrix(projMatrix.getArray()),MatrixStack.multMatrix(viewMatrix.getArray()),MatrixStack.push();for(var e=0;e<this.live2DMgr.numModels();e++){var t=this.live2DMgr.getModel(e);if(null==t)return;if(t.initialized&&!t.updating&&(t.update(),t.draw(this.gl),!this.isModelShown&&e==this.live2DMgr.numModels()-1)){this.isModelShown=!this.isModelShown;var i=document.getElementById("btnChange");i.textContent="Change Model",i.removeAttribute("disabled"),i.setAttribute("class","active")}}MatrixStack.pop()}function changeModel(){var e=document.getElementById("btnChange");e.setAttribute("disabled","disabled"),e.setAttribute("class","inactive"),e.textContent="Now Loading...",this.isModelShown=!1,this.live2DMgr.reloadFlg=!0,this.live2DMgr.count++,this.live2DMgr.changeModel(this.gl)}function modelScaling(e){var t=thisRef.viewMatrix.isMaxScale(),i=thisRef.viewMatrix.isMinScale();thisRef.viewMatrix.adjustScale(0,0,e),t||thisRef.viewMatrix.isMaxScale()&&thisRef.live2DMgr.maxScaleEvent(),i||thisRef.viewMatrix.isMinScale()&&thisRef.live2DMgr.minScaleEvent()}function modelTurnHead(e){thisRef.drag=!0;var t=e.target.getBoundingClientRect(),i=transformScreenX(e.clientX-t.left),n=transformScreenY(e.clientY-t.top),r=transformViewX(e.clientX-t.left),a=transformViewY(e.clientY-t.top);LAppDefine.DEBUG_MOUSE_LOG&&l2dLog("onMouseDown device( x:"+e.clientX+" y:"+e.clientY+" ) view( x:"+r+" y:"+a+")"),thisRef.lastMouseX=i,thisRef.lastMouseY=n,thisRef.dragMgr.setPoint(r,a),thisRef.live2DMgr.tapEvent(r,a)}function followPointer(e){var t=e.target.getBoundingClientRect(),i=transformScreenX(e.clientX-t.left),n=transformScreenY(e.clientY-t.top),r=transformViewX(e.clientX-t.left),a=transformViewY(e.clientY-t.top);LAppDefine.DEBUG_MOUSE_LOG&&l2dLog("onMouseMove device( x:"+e.clientX+" y:"+e.clientY+" ) view( x:"+r+" y:"+a+")"),thisRef.drag&&(thisRef.lastMouseX=i,thisRef.lastMouseY=n,thisRef.dragMgr.setPoint(r,a))}function lookFront(){thisRef.drag&&(thisRef.drag=!1),thisRef.dragMgr.setPoint(0,0)}function mouseEvent(e){if(e.preventDefault(),"mousewheel"==e.type){if(e.clientX<0||thisRef.canvas.clientWidth<e.clientX||e.clientY<0||thisRef.canvas.clientHeight<e.clientY)return;modelScaling(e.wheelDelta>0?1.1:.9)}else if("mousedown"==e.type){if("button"in e&&0!=e.button)return;modelTurnHead(e)}else if("mousemove"==e.type)followPointer(e);else if("mouseup"==e.type){if("button"in e&&0!=e.button)return;lookFront()}else"mouseout"==e.type?lookFront():"contextmenu"==e.type&&changeModel()}function touchEvent(e){e.preventDefault();var t=e.touches[0];if("touchstart"==e.type)1==e.touches.length&&modelTurnHead(t);else if("touchmove"==e.type){if(followPointer(t),2==e.touches.length){var i=e.touches[0],n=e.touches[1],r=Math.pow(i.pageX-n.pageX,2)+Math.pow(i.pageY-n.pageY,2);modelScaling(thisRef.oldLen-r<0?1.025:.975),thisRef.oldLen=r}}else"touchend"==e.type&&lookFront()}function transformViewX(e){var t=this.deviceToScreen.transformX(e);return viewMatrix.invertTransformX(t)}function transformViewY(e){var t=this.deviceToScreen.transformY(e);return viewMatrix.invertTransformY(t)}function transformScreenX(e){return this.deviceToScreen.transformX(e)}function transformScreenY(e){return this.deviceToScreen.transformY(e)}function getWebGLContext(){for(var e=["webgl","experimental-webgl","webkit-3d","moz-webgl"],t=0;t<e.length;t++)try{var i=this.canvas.getContext(e[t],{premultipliedAlpha:!0});if(i)return i}catch(n){}return null}function l2dLog(e){if(LAppDefine.DEBUG_LOG){var t=document.getElementById("myconsole");t.innerHTML=t.innerHTML+"<br>"+e,console.log(e)}}function l2dError(e){LAppDefine.DEBUG_LOG&&(l2dLog("<span style='color:red'>"+e+"</span>"),console.error(e))}var thisRef=void 0;window.onerror=function(e,t,i,n,r){var a="file:"+t+"<br>line:"+i+" "+e;l2dError(a)};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
